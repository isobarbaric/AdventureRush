    package game;

import mainmenu.User;
import java.awt.Image;
import java.awt.Rectangle;
import javax.swing.ImageIcon;
import mainmenu.MainMenuWindow;

public final class StoreWindowFrame extends javax.swing.JFrame {

    // attributes of a StoreWindowFrame object
    private final MainMenuWindow mainWindow;
    private int currentIndex;
    private final User currentUser;
    private final Store currentStore;

    /**
     * Creates new form StoreWindowFrame
     * @param mainWindow 
     */
    public StoreWindowFrame(MainMenuWindow mainWindow) {
        // setting up the GUI with a call to the initComponents method
        initComponents();

        // initializing the mainWindow attribute
        this.mainWindow = mainWindow;

        // initializing the currentStore attribute
        this.currentStore = mainWindow.getCurrentStore().clone();

        // sorting the store items
        currentStore.sortStoreItems();

        // captures the location of the current window using a Rectangle object                
        final Rectangle bounds = mainWindow.getBounds();

        // set the location of the mainWindow to be consistent with the location of the current window
        this.setLocation(bounds.x, bounds.y);

        // initializing currentIndex
        currentIndex = 0;

        // initializing currentUser
        currentUser = mainWindow.getCurrentUser();

        // calling the updateStatus method to update buttons and labels
        updateStatus();

        // calling the loadSpecificSprite method to update the next Sprite
        loadSpecificSprite();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prevBtn = new javax.swing.JToggleButton();
        nextBtn = new javax.swing.JToggleButton();
        buyBtn = new javax.swing.JToggleButton();
        leaveBtn = new javax.swing.JToggleButton();
        imageLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        defaultSpriteButton = new javax.swing.JToggleButton();
        costTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        prevBtn.setText("Previous Sprite");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });

        nextBtn.setText("Next Sprite");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        buyBtn.setText("Buy");
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        leaveBtn.setText("Return");
        leaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveBtnActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 22)); // NOI18N
        titleLabel.setText("Store");

        defaultSpriteButton.setText("Set as Default Sprite");
        defaultSpriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultSpriteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(defaultSpriteButton)
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(150, 150, 150)
                        .addComponent(leaveBtn)
                        .addGap(41, 41, 41))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(prevBtn)
                        .addGap(46, 46, 46)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(costTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leaveBtn)
                        .addGap(147, 147, 147)
                        .addComponent(nextBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel)
                                .addGap(18, 18, 18)
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(169, 169, 169)
                                .addComponent(prevBtn)))))
                .addGap(29, 29, 29)
                .addComponent(costTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultSpriteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        // decrementing currentIndex
        currentIndex--;

        // creating the circular array if the left end is reached
        if (currentIndex < 0) {

            // setting the pointer to the rightmost index
            currentIndex = currentStore.getStoreItems().size() - 1;
        }

        // calling the updateStatus method to update buttons and labels
        updateStatus();

        // calling the loadSpecificSprite method to update the next Sprite
        loadSpecificSprite();
    }//GEN-LAST:event_prevBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        // incrementing currentIndex
        currentIndex++;

        // creating circular array if the right end is reached
        if (currentIndex > currentStore.getStoreItems().size() - 1) {

            // setting the pointer to the leftmost index
            currentIndex = 0;
        }

        // calling the updateStatus method to update buttons and labels
        updateStatus();

        // calling the loadSpecificSprite method to update the next Sprite        
        loadSpecificSprite();
    }//GEN-LAST:event_nextBtnActionPerformed

    private void leaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveBtnActionPerformed
        // setting the current frame to be invisible
        this.setVisible(false);

        // getting the current location of this window
        Rectangle bounds = this.getBounds();

        // setting the location for this window to the current location determined above
        mainWindow.setLocation(bounds.x, bounds.y);

        // setting the mainWindow to be visible now that its location has been adequately changed
        mainWindow.setVisible(true);
    }//GEN-LAST:event_leaveBtnActionPerformed

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        // facilitating the purchase of the current Store item by the current User
        currentStore.makePurchase(currentIndex, currentUser);

        // setting the buy button to false as this item is not one of purchased ones
        buyBtn.setEnabled(false);

        // setting the text on the button to Purchased to indicate that the item has been purchased
        buyBtn.setText("Purchased");

        // setting the text on the button to the below to indicate that the item can be chosen as default sprite
        defaultSpriteButton.setText("Set as Default Sprite");

        // allowing the user to interact with the default sprite button
        defaultSpriteButton.setEnabled(true);        

        // if the current item is the default sprite, deactivate the make default sprite option
        if (currentStore.getSpecificStoreItem(currentIndex).equals(currentUser.getDefaultSprite())) {

            // not allowing the user to interact with the default sprite button
            defaultSpriteButton.setEnabled(false);

            // setting appropriate text to the sprite button
            defaultSpriteButton.setText("Is Default Sprite");
        }

        // updating the labels on the mainWindow screen with a call to the updateLabels() method
        mainWindow.updateLabels();
    }//GEN-LAST:event_buyBtnActionPerformed

    private void defaultSpriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultSpriteButtonActionPerformed
        // setting the default sprite to the current sprite
        currentUser.setDefaultSprite(currentStore.getSpecificStoreItem(currentIndex));

        // setting the text on the button to the below to indicate that the item is the default sprite
        defaultSpriteButton.setText("Is Default Sprite");
    }//GEN-LAST:event_defaultSpriteButtonActionPerformed

    /**
     * Loading the image of the current Sprite (one at currentIndex) into the central image-dedicated JLabel
     */
    public void loadSpecificSprite() {
        // loading the scaled version of image into the label 
        imageLabel.setIcon(scaleImage(currentStore.getSpecificStoreItem(currentIndex).getSpriteCharacter()));
    }

    /**
     * Scales image by 7 times to be displayed in the Store
     * @param imageToBeScaled the Image to be Scaled
     * @return a scaled ImageIcon of the same original File
     */
    public ImageIcon scaleImage(ImageIcon imageToBeScaled) {
        // creating an Image object to store the Image associated with the parameter ImageIcon
        Image scaledImg = imageToBeScaled.getImage();

        // assigining the same instance to a scaled version of it
        scaledImg = scaledImg.getScaledInstance(imageToBeScaled.getIconWidth()*7, imageToBeScaled.getIconHeight()*7,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  

        // returning this scaled version
        return new ImageIcon(scaledImg);
    }
    
    /**
     * Updates the status of the labels and buttons on the GUI based on the current Sprite heres
     */
    public void updateStatus() {
        // sets the text of the cost
        costTextField.setText("Cost: " + currentStore.getSpecificStoreItem(currentIndex).getCostToPurchase());

        // if the sprite is purchased
        if (userHasCurrentSprite()) {
            // setting the buy button to not be interactable
            buyBtn.setEnabled(false); 

            // setting the buy button to have appropriate text
            buyBtn.setText("Purchased");

            // setting the default sprite button to be interactable
            defaultSpriteButton.setEnabled(true);

            // if the current sprite is the default one, act accordingly
            if (currentStore.getSpecificStoreItem(currentIndex).equals(currentUser.getDefaultSprite())) {

                // setting the default sprite button to have appropriate text
                defaultSpriteButton.setText("Is Default Sprite");
            } else {

                // setting the default sprite button to have appropriate text
                defaultSpriteButton.setText("Set as Default Sprite");
            }
        } else {  // if the sprite isn't purchased
            // setting the button to false as it is not applicable in this scenario
            defaultSpriteButton.setEnabled(false);

            // if User does not have enough money 
            if (currentUser.getCurrencyPossessed() >= currentStore.getSpecificStoreItem(currentIndex).getCostToPurchase()) {
                // setting the buy button to be interactable
                buyBtn.setEnabled(true);

                // setting the buy button to have appropriate text
                buyBtn.setText("Buy");

                // setting the button to the following text to show how it is not applicable
                defaultSpriteButton.setText("N/A");
            } else { // if User has enough money
                // setting the buy button to not be interactable
                buyBtn.setEnabled(false);

                // setting the buy button to have appropriate text
                buyBtn.setText("Insufficient Funds"); //Displays the cost of the sprite

                // setting the button to the following text to show how it is not applicable
                defaultSpriteButton.setText("N/A");
            }
        }
    }
    
    /**
     * Checks whether or not the User has the Sprite at currentIndex or not
     * @return whether or not the User has the Sprite at currentIndex or not 
     */
    private boolean userHasCurrentSprite() {
        // looping through the Sprites that the User has
        for (Sprite currentSprite: currentUser.getSprites()) {

            // checking if the currentSprite equals the one at the index 
            if (currentSprite.equals(currentStore.getSpecificStoreItem(currentIndex))) {

                // if they are equal, then we return true to indicate that
                return true;
            }
        }

        // if the method falls through to here, then that means the Sprite was not found
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buyBtn;
    private javax.swing.JTextField costTextField;
    private javax.swing.JToggleButton defaultSpriteButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JToggleButton leaveBtn;
    private javax.swing.JToggleButton nextBtn;
    private javax.swing.JToggleButton prevBtn;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}